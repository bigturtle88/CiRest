<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Rest_server extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();


        $this->methods['country_get']['limit'] = 500;
        $this->methods['country_post']['limit'] = 100;
        $this->methods['country_put']['limit'] = 100;
        $this->methods['country_delete']['limit'] = 50;

        $this->methods['city_get']['limit'] = 500;
        $this->methods['city_post']['limit'] = 100;
        $this->methods['city_put']['limit'] = 100;
        $this->methods['city_delete']['limit'] = 50;

        $this->methods['lang_get']['limit'] = 500;
        $this->methods['lang_post']['limit'] = 100;
        $this->methods['lang_put']['limit'] = 100;
        $this->methods['lang_delete']['limit'] = 50;

        $this->methods['cityPull_get']['limit'] = 500;
        $this->methods['langPull_get']['limit'] = 500;
    }

    public function country_get()
    {

        $this->load->model('Country_model');

        $country =  $this->Country_model->country();

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($country)
            {
                // Set the response and exit
                $this->response($country, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                        'status' => FALSE,
                        'message' => 'No users were found'
                    ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retreival.
        // Usually a model is to be used for this.

        $country = NULL;

        if (!empty($country))
        {
            foreach ($country as $key => $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $country = $value;
                }
            }
        }

        if (!empty($country))
        {
            $this->set_response($country, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                    'status' => FALSE,
                    'message' => 'User could not be found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function country_post()
    {


        $name = $this->post('name');

        $this->load->model('Country_model');

        $this->Country_model->create($name);


        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),

            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
    public function country_put()
    {


        $id = $this->put('id');
        $name = $this->put('name');

        $this->load->model('Country_model');

        $this->Country_model->update($id, $name);


        $message = [
            'id' => 100, // Automatically generated by the model
            'message' => 'Edite a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function country_delete()
    {
        $id = (int) $this->delete('id');

        $this->load->model('Country_model');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }


        $this->Country_model->delete($id);

        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    public function city_post()
    {
        $name = $this->post('name');
        $idCountry =  (int) $this->post('idCountry');

        if ($idCountry <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        $this->load->model('City_model');

        $this->City_model->create($name,  $idCountry);
       /// echo  $idCountry;die();

        $message = [


            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
    public function city_put()
{


    $id = (int) $this->put('id');
    $name = $this->put('name');

    if ( $id  <= 0)
    {
        // Set the response and exit
        $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
    }

    $this->load->model('City_model');

    $this->City_model->update($id, $name);


    $message = [

        'message' => 'Edite a resource'
    ];

    $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
}

    public function city_delete()
    {
        $id = (int) $this->delete('id');

        if ( $id  <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        $this->load->model('City_model');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }


        $this->City_model->delete($id);

        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

    public function cityPull_get()
    {

        $this->load->model('City_model');



        $id = $this->get('id');




        if ($id === NULL)
        {


                // Set the response and exit
                $this->response([
                        'status' => FALSE,
                        'message' => 'No city were found'
                    ]); // NOT_FOUND (404) being the HTTP response code

        }



        $id = (int) $id;
        $cityPull =  $this->City_model->cityPull($id);

        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->set_response([
                    'status' => FALSE,
                    'message' => 'City could not be found'
                ]); // NOT_FOUND (404) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retreival.
        // Usually a model is to be used for this.





        if (!empty($cityPull))
        {
            $this->set_response($cityPull, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                    'status' => FALSE,
                    'message' => 'City could not be found'
                ]); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function langPull_get()
    {

        $this->load->model('Lang_model');



        $id = (int) $this->get('id');

        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }


        if ($id === NULL)
        {


            // Set the response and exit
            $this->response([
                    'status' => FALSE,
                    'message' => 'No   lang   were found'
                ]); // NOT_FOUND (404) being the HTTP response code

        }



        $id = (int) $id;
        $langPull =  $this->Lang_model->langPull($id);

        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response([
                    'status' => FALSE,
                    'message' => 'No   lang   were found'
                ]); // NOT_FOUND (404) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retreival.
        // Usually a model is to be used for this.





        if (!empty( $langPull ))
        {
            $this->set_response( $langPull , REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                    'status' => FALSE,
                    'message' => 'Lang could not be found'
                ]); // NOT_FOUND (404) being the HTTP response code
        }
    }
    public function lang_post()
    {
        $name = $this->post('name');
        $idCountry = (int) $this->post('idCountry');
        if (  $idCountry <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }


        $this->load->model('Lang_model');

        $this->Lang_model->create($name,  $idCountry);
        /// echo  $idCountry;die();

        $message = [


            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
    public function lang_put()
    {


        $id = (int) $this->put('id');
        $name = $this->put('name');
        $idCountry = (int) $this->post('idCountry');

        if ( $id  <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        $this->load->model('Lang_model');

        $this->Lang_model->update($id, $name);


        $message = [

            'message' => 'Edite a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }
    public function lang_delete()
    {
        $id = (int) $this->delete('id');

        $this->load->model('Lang_model');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }


        $this->Lang_model->delete($id);

        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }
}
